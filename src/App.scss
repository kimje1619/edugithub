@charset "UTF-8";

$main-color : #ffaa50;

/*

1. Sass와 scss의 차이점
sass : 중괄호가 아닌 들여쓰기를 합니다.
scss : css처럼 {}와 ;을 사용합니다.

scss는 다양한 데이터 타입을 정의하고 있어 이를 변수처럼 활용할 수 있습니다.

*/

$boolean : true;
$string : hello;
$color : red;
$number : 720;
$list : red, orange, yellow, green, blue;
// map : List와 유사하나 값이 key:value 형태
$map : (
  l :light,
  d: dark,
);

// 2. Nesting(중첩) : 상위 선택자의 반복을 줄일 수 있습니다.

.section{
  width:100%;

  .list{
    padding: 20px;

    li{
      float:left;
    }
  }
}

// 3. & (상위 선택자 참조) : 중첩(Nesting) 내부에서 & 키워드는 상위(부모)선택자로 치환됩니다.
.btn {
  position:absolute;
  // .btn.active
  &.active{
    color:red;
  }
}

.list{
  li{
    // .list li:last-child
    &:last-child{
      margin-right:0;
    }
  }
}

.fs{
  &-small{
    // fs-small
    font-size:12px;
  }
  &-mediun{
    // fs-mediun
    font-size:14px;
  }
  &-large{
    // fs-large
    font-size:16px;
  }
}

// 4. Variables(변수) : 반복적으로 사용되거나 관리하고 싶은 값을 변수로 지정할 수 있습니다. 변수 앞에는 항상 $를 붙여야 합니다.
$color-primary : #e96900;
$url-images : "/assets/images/";
$w: 200px;

.box{
  width:$w;
  margin-left:$w;
  //background: $color-primary url($url-images + "bg.jpg");
}

// 다만 변수는 선언된 블록 내에서만 유효 범위를 가집니다.
.box1 {
  $color: #111;
  background: $color;
}

/* Error */
.box2 {
  //background: $color;
}

// 5. #{}을 이용하면 JavaScript의 템플릿 리터럴처럼 코드의 어디든지 변수 값을 넣을 수 있습니다.
$family : unquote("Droid+sans");
@import url("http://fonts.googleapis.com/css?family=#{$family}");


// 6. Operations(연산) : 연산자는 레이아웃을 디테일하게 디자인할 때 유용하게 쓰일 수 있습니다.
// + 더하기
// - 빼기
// * 곱하기 : 하나 이상의 값이 반드시 숫자(Number)
// / 나누기 : 오른쪽 값이 반드시 숫자(Number)
// % 나머지

// 7. Mixins(재활용) : 재사용할 css스타일을 정의할 수 있는 유용한 기능입니다.
// @mixin을 통해 스타일을 선언하고 @include을 통해 사용합니다.

@mixin large-text{
  font:{
    size:22px;
    weight:bold;
    family:sans-serif;
  }
  color:orange;
  &::after{
    content : '!!';
  }

  span.icon{
    //background:url("/images/icon.png");
  }
}

h1{
  @include large-text;
}


// 8. Function(함수) : mixin과 차이점 - 반환값에 차이가 있음
// Mixin : 지정한 style을 반환
// 함수 : 계산된 특정 값을 @return 지시어를 통해 반환

$max-width: 980px;

@function columns($number: 1, $columns: 12){
  @return $max-width * ($number / $columns);
}

.box_group{
  // 총너비 width: 980px;
  width: $max-width;

  .box1{
    // 총 너비의 약 8.3% 
    //width: 81.66667px;
    width: columns(); //1
  }

  .box2{
    // 총 너비의 약 66.7%;
    // width: 653.33333px;
    width: columns(8);
    // 980 * (8/12)
  }

  .box3{
    // 총 너비의 25%
    // width: 245px;
    width: columns(3);
  }
}

// 9. Condition(조건)
// if(조건문, 참, 거짓)
